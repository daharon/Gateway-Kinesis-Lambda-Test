---
AWSTemplateFormatVersion: 2010-09-09
# https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md
Transform: 'AWS::Serverless-2016-10-31'
Description: 'API Gateway -> Kinesis -> Lambda -> DB'

Parameters:
  MyIP:
    Type: String
    Description: 'My IP address to allow access to the database. Use `curl ipecho.net/plain`.'
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: 'The VPC ID within which to run the Lambda functions and ECS database task.'
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: 'List of subnets within the specified VPC.'

Resources:
  ###
  # API Gateway
  ###
  ApiAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiRole.Arn

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/test/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Kinesis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                Resource:
                  - !GetAtt KinesisStream.Arn

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'Api-Kinesis-Test'
      Description: 'Rest API for test.'
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Latest
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref RestApi
      MethodSettings:
        - DataTraceEnabled: True
          HttpMethod: '*'
          MetricsEnabled: True
          ResourcePath: '/*'
          ThrottlingRateLimit: 100
          ThrottlingBurstLimit: 100
          LoggingLevel: INFO

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ItemPutMethod
    Properties:
      RestApiId: !Ref RestApi

  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Ref ApiStage
      Throttle:
        RateLimit: 100.0
        BurstLimit: 100

  ApiBenchmarkKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: benchmark
      Description: 'Benchmark client.'
      Enabled: true
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: !Ref ApiStage

  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiBenchmarkKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  ###
  # API Validation
  ###
  BodyOnlyValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      RestApiId: !Ref RestApi
      ValidateRequestBody: True
      ValidateRequestParameters: False

  ###
  # API Models
  ###
  ItemModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: 'application/json'
      Description: 'Item for pass-through to Kinesis.'
      RestApiId: !Ref RestApi
      Schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        title: Item
        description: 'Item for pass-through to Kinesis'
        type: object
        properties:
          id:
            description: 'The item ID.'
            type: integer
          description:
            description: 'A description of the item.'
            type: string
          count:
            description: 'How many items exist.'
            type: integer

  ###
  # API Resources
  ###

  ### /item
  ItemResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      PathPart: item
      ParentId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi

  ItemPutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref ItemResource
      RestApiId: !Ref RestApi
      AuthorizationType: NONE
      HttpMethod: PUT
      RequestValidatorId: !Ref BodyOnlyValidator
      Integration:
        Type: AWS
        Credentials: !GetAtt ApiRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: NEVER
        RequestParameters:
          'integration.request.header.Content-Type': "'application/x-amz-json-1.1'"
        RequestTemplates:
          'application/json': !Sub |
            #set($partitionKey = $context.requestId)
            {
                "StreamName": "${KinesisStream}",
                "Data": "$util.base64Encode($input.body)",
                "PartitionKey": "$partitionKey"
            }
        Uri: !Join
          - ':'
          - - 'arn:aws:apigateway'
            - !Ref 'AWS::Region'
            - 'kinesis'
            - 'action/PutRecord'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2\d{2}'
          - StatusCode: 400
            SelectionPattern: '4\d{2}'
          - StatusCode: 500
            SelectionPattern: '5\d{2}'
      OperationName: InsertItem
      RequestModels:
        'application/json': !Ref ItemModel
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            'application/json': Empty
        - StatusCode: 400
          ResponseModels:
            'application/json': Error
        - StatusCode: 500
          ResponseModels:
            'application/json': Error

  ###
  # Kinesis
  ###
  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 1

  ###
  # Lambda Functions
  ###
  SharedLambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Lambda function SG for the Gateway-Kinesis-Lambda-Test.'
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 0
          ToPort: 65535
          IpProtocol: -1
      VpcId: !Ref VPC

  RustFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Rust function for the API Gateway -> Kinesis -> Lambda test.'
      CodeUri: ./rust/target/lambda/release/gateway-kinesis-lambda-test.zip
      Runtime: provided
      Handler: NA
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt RustFunctionRole.Arn
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
          CASSANDRA_HOST: !Join [ '.', [ !GetAtt CassandraServiceDiscovery.Name, 'gklt' ] ]
          CASSANDRA_PORT: '9042'
      VpcConfig:
        SecurityGroupIds:
          - !Ref SharedLambdaSecurityGroup
        SubnetIds: !Ref Subnets

  RustFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/test/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Kinesis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:ListShards
                  - kinesis:ListStreams
                  - kinesis:SubscribeToShard
                Resource:
                  - !GetAtt KinesisStream.Arn

  RustFunctionEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt KinesisStream.Arn
      FunctionName: !GetAtt RustFunction.Arn
      StartingPosition: LATEST
      BatchSize: 100

  JvmFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'JVM function for the API Gateway -> Kinesis -> Lambda test.'
      CodeUri: ./jvm/target/gateway-kinesis-lambda-test-fat.jar
      Runtime: java8
      Handler: 'us.aharon.gateway.kinesis.lambda.test.App::handler'
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt JvmFunctionRole.Arn
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
          CASSANDRA_HOST: !Join [ '.', [ !GetAtt CassandraServiceDiscovery.Name, 'gklt' ] ]
          CASSANDRA_PORT: '9042'
      VpcConfig:
        SecurityGroupIds:
          - !Ref SharedLambdaSecurityGroup
        SubnetIds: !Ref Subnets

  JvmFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/test/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Kinesis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:DescribeStream
                  - kinesis:DescribeStreamSummary
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:ListShards
                  - kinesis:ListStreams
                  - kinesis:SubscribeToShard
                Resource:
                  - !GetAtt KinesisStream.Arn

  JvmFunctionEvents:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt KinesisStream.Arn
      FunctionName: !GetAtt JvmFunction.Arn
      StartingPosition: LATEST
      BatchSize: 100

  ###
  # ECS Cluster
  ###
  GatewayKinesisLambdaTestCluster:
    Type: AWS::ECS::Cluster

  GatewayKinesisLambdaTestNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: gklt
      Vpc: !Ref VPC

  ###
  # ECS Services
  ###
  CassandraRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/test/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Resource:
                  - !GetAtt CassandraLogs.Arn

  CassandraSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Access to Cassandra service.'
      SecurityGroupEgress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 0
          ToPort: 65535
          IpProtocol: -1
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref SharedLambdaSecurityGroup
          IpProtocol: tcp
          FromPort: 9042
          ToPort: 9042
        - CidrIp: !Join [ '/', [ !Ref MyIP, '32' ] ]
          IpProtocol: tcp
          FromPort: 9042
          ToPort: 9042
      VpcId: !Ref VPC

  CassandraLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: '/ecs/cassandra'
      RetentionInDays: 14

  CassandraTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: gklt-cassandra
      Cpu: 2048
      Memory: 4096
      ExecutionRoleArn: !GetAtt CassandraRole.Arn
      TaskRoleArn: !GetAtt CassandraRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: 'cassandra:3'
          Name: cassandra
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CassandraLogs
              awslogs-region: us-east-1
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 9042
              HostPort: 9042
              Protocol: tcp
          Ulimits:
            - Name: nofile
              HardLimit: 16384
              SoftLimit: 16384

  CassandraServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: cassandra
      NamespaceId: !Ref GatewayKinesisLambdaTestNamespace
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
        RoutingPolicy: MULTIVALUE
      # Required for proper inter-operation with ECS services.
      HealthCheckCustomConfig:
        FailureThreshold: 2

  CassandraService:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition: !Ref CassandraTaskDefinition
      DesiredCount: 1
      Cluster: !GetAtt GatewayKinesisLambdaTestCluster.Arn
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref CassandraSecurityGroup
          Subnets: !Ref Subnets
      ServiceRegistries:
        - RegistryArn: !GetAtt CassandraServiceDiscovery.Arn
